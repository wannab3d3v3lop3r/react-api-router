{"version":3,"sources":["BookInfo/BookInfo.js","BookLists/BookLists.js","Forms/Forms.js","App.js","index.js"],"names":["Bookinfo","className","class","target","href","this","props","imageUrl","alt","title","src","image","author","price","description","Component","Booklists","bookInfo","arrayLength","books","map","book","index","key","get","saleability","ebook","printType","Forms","updateBookType","bookType","setState","state","input","url","options","method","process","API_KEY","headers","fetch","then","res","console","log","json","data","fetchData","catch","err","errorMessage","message","updatePrintType","e","preventDefault","onSubmit","handleSubmit","name","id","type","placeholder","value","onChange","htmlFor","App","items","totalItems","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7db8476f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './BookInfo.css'\n\nexport class Bookinfo extends Component {\n    render() {\n        return (\n            <div className='lists'>\n                <div class=\"img\">\n                    <a target={`_blank`} href={`${this.props.imageUrl}`}><img alt={`${this.props.title}`} src={`${this.props.image}`}/></a>\n                </div>\n                <div className='lists-text-container'>\n                    <h1>{this.props.title}</h1>\n                    <p>Author: {this.props.author}</p>\n                    <p>Price: ${this.props.price}</p>\n                    <p>{this.props.description}</p>\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nexport default Bookinfo\n","import React, { Component } from 'react'\nimport BookInfo from '../BookInfo/BookInfo'\nimport get from 'get-value'\n\nexport class Booklists extends Component {\n\n    render() {\n        const bookInfo = this.props.arrayLength !== 0 ? this.props.books.map((book,index) => {\n            return <BookInfo \n                        key={get(book,'id')}\n                        title={get(book,'volumeInfo.title')}\n                        author={get(book,'volumeInfo.authors')}\n                        price={get(book,'saleInfo.listPrice.amount',0)}\n                        saleability={get(book,'saleInfo.saleability')}\n                        ebook={get(book,'saleInfo.isEbook')}\n                        description={get(book,'searchInfo.textSnippet')}\n                        image={get(book,'volumeInfo.imageLinks.thumbnail', '')}\n                        imageUrl={get(book,'volumeInfo.infoLink')}\n                        printType={get(book,'volumeInfo.printType')}\n                    />\n        }) : ''\n\n        return (\n            <div className=\"book-lists\">\n                {bookInfo}\n            </div>\n        )\n    }\n}\n\nexport default Booklists\n","import React, { Component } from 'react'\nimport './Forms.css'\n\nexport class Forms extends Component {\n    constructor(){\n        super()\n        this.state = {\n            input: '',\n            bookType: 'ebooks',\n            printType: 'all',\n            errorMessage: ''\n        }\n    }\n\n    updateBookType = bookType => {\n\n        this.setState({\n            bookType\n        })\n\n        const {input, printType} = this.state;\n        const url = `https://www.googleapis.com/books/v1/volumes?q=${input}+intitle:${input}&filter=${bookType}&printType=${printType}`;\n        const options = {\n          method: 'GET',\n          key: process.env.API_KEY,\n          headers: {\n            'Content-Type': `application/json`,\n          },\n        };\n\n        fetch(url, options)\n            .then(res => {\n                console.log(res);\n                return res.json();\n            })\n            .then(data => {\n                console.log(data);\n                this.props.fetchData(data);\n            })\n            .catch(err => {\n                console.log(`error message is `,err);\n                this.setState({\n                    errorMessage: err.message\n                })\n            })\n    }\n\n    updatePrintType = printType => {\n\n        this.setState({\n            printType\n        })\n\n        const {input, bookType} = this.state;\n        const url = `https://www.googleapis.com/books/v1/volumes?q=${input}+intitle:${input}&printType=${printType}&filter=${bookType}`;\n        console.log(url);\n        const options = {\n          method: 'GET',\n          key: process.env.API_KEY,\n          headers: {\n            'Content-Type': `application/json`,\n          },\n        };\n\n        fetch(url, options)\n            .then(res => {\n                console.log(res);\n                return res.json();\n            })\n            .then(data => {\n                console.log(data);\n                this.props.fetchData(data);\n            })\n            .catch(err => {\n                console.log(`error message is `,err);\n                this.setState({\n                    errorMessage: err.message\n                })\n            })\n\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const {input} = this.state;\n        const url = `https://www.googleapis.com/books/v1/volumes?q=${input}+intitle:${input}`;\n        const options = {\n          method: 'GET',\n          key: process.env.API_KEY,\n          headers: {\n            'Content-Type': `application/json`,\n          },\n        };\n\n        fetch(url, options)\n            .then(res => {\n                console.log(res);\n                return res.json();\n            })\n            .then(data => {\n                console.log(data);\n                this.props.fetchData(data);\n            })\n            .catch(err => {\n                console.log(`error message is `,err);\n                this.setState({\n                    errorMessage: err.message\n                })\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className='search-container'>\n                    <span>Search:</span>\n                    <form onSubmit={e => this.handleSubmit(e)}>\n                        <input \n                            name=\"search\" \n                            id=\"search\" type=\"text\" \n                            placeholder=\"search for books\" \n                            value={this.state.input} \n                            onChange={e => this.setState({input: e.target.value})}/>\n                        <button type=\"submit\">Search</button>\n                    </form>\n                </div>\n                <div className='filter-container'>\n                    <form>\n                        <label htmlFor=\"print-type\">Print Type: </label>\n                        <select id=\"print-type\"  onChange={e => this.updatePrintType(e.target.value)}>\n                            <option value=\"all\">All</option>\n                            <option value=\"books\">Books</option>\n                            <option value=\"magazines\">Magazines</option>\n                        </select>\n                        <label htmlFor=\"book-type\">Book Type:</label>\n                        <select id=\"book-type\"  onChange={e => this.updateBookType(e.target.value)}>\n                            <option value=\"ebooks\">No Filter</option>\n                            <option value=\"free-ebooks\">Free eBooks</option>\n                            <option value=\"paid-ebooks\">Paid eBooks</option>\n                        </select>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Forms\n","import React, { Component } from 'react'\nimport Booklists from './BookLists/BookLists'\nimport Forms from './Forms/Forms'\nimport './App.css'\n\nexport class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      books: [],\n      totalItems: 0,\n    }\n  }\n\n  fetchData = data => {\n    this.setState({\n      books: data.items,\n      totalItems: data.totalItems\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='container'>\n          <h1 className='google-title'>Google Book Search</h1>\n        </div>\n        <Forms fetchData={this.fetchData}/>\n        <Booklists books={this.state.books} arrayLength={this.state.totalItems}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}